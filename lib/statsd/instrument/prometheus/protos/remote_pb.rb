# frozen_string_literal: true

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: remote.proto

require "google/protobuf"

require_relative "./types_pb"

descriptor_data = "\n\x0cremote.proto\x12\nprometheus\x1a\x0btypes.proto\"n\n\x0cWriteRequest\x12*\n\ntimeseries\x18\x01 \x03(\x0b\x32\x16.prometheus.TimeSeries\x12,\n\x08metadata\x18\x03 \x03(\x0b\x32\x1a.prometheus.MetricMetadataJ\x04\x08\x02\x10\x03\"\xae\x01\n\x0bReadRequest\x12\"\n\x07queries\x18\x01 \x03(\x0b\x32\x11.prometheus.Query\x12\x45\n\x17\x61\x63\x63\x65pted_response_types\x18\x02 \x03(\x0e\x32$.prometheus.ReadRequest.ResponseType\"4\n\x0cResponseType\x12\x0b\n\x07SAMPLES\x10\x00\x12\x17\n\x13STREAMED_XOR_CHUNKS\x10\x01\"8\n\x0cReadResponse\x12(\n\x07results\x18\x01 \x03(\x0b\x32\x17.prometheus.QueryResult\"\x8f\x01\n\x05Query\x12\x1a\n\x12start_timestamp_ms\x18\x01 \x01(\x03\x12\x18\n\x10\x65nd_timestamp_ms\x18\x02 \x01(\x03\x12*\n\x08matchers\x18\x03 \x03(\x0b\x32\x18.prometheus.LabelMatcher\x12$\n\x05hints\x18\x04 \x01(\x0b\x32\x15.prometheus.ReadHints\"9\n\x0bQueryResult\x12*\n\ntimeseries\x18\x01 \x03(\x0b\x32\x16.prometheus.TimeSeries\"]\n\x13\x43hunkedReadResponse\x12\x31\n\x0e\x63hunked_series\x18\x01 \x03(\x0b\x32\x19.prometheus.ChunkedSeries\x12\x13\n\x0bquery_index\x18\x02 \x01(\x03\x42\x08Z\x06prompbb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require "google/protobuf/descriptor_pb"
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn("Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}")
  imports = [
    ["prometheus.TimeSeries", "types.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn("- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}")
    end
  end
  warn("Each proto file must use a consistent fully-qualified name.")
  warn("This will become an error in the next major version.")
end

module Prometheus
  WriteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("prometheus.WriteRequest").msgclass
  ReadRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("prometheus.ReadRequest").msgclass
  ReadRequest::ResponseType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("prometheus.ReadRequest.ResponseType").enummodule
  ReadResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("prometheus.ReadResponse").msgclass
  Query = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("prometheus.Query").msgclass
  QueryResult = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("prometheus.QueryResult").msgclass
  ChunkedReadResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("prometheus.ChunkedReadResponse").msgclass
end
